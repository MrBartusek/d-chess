{
  "version": 3,
  "sources": ["../../src/board.ts", "../../src/base/piece.ts", "../../src/base/moving-strategy.ts", "../../src/moves/sliding-move.ts", "../../src/pieces/bishop.ts", "../../src/moves/regular-move.ts", "../../src/pieces/king.ts", "../../src/pieces/knight.ts", "../../src/moves/pawn-double-move.ts", "../../src/pieces/pawn.ts", "../../src/pieces/queen.ts", "../../src/pieces/rook.ts", "../../src/sound-player.ts", "../../src/game.ts", "../../src/ui/board-generator.ts", "../../src/ui/player-generator.ts", "../../src/ui/ui-manager.ts", "../../src/main.ts"],
  "sourcesContent": ["import { Piece } from './base/piece';\n\nexport class Board {\n\tprivate state: (Piece | null)[] = new Array(63).fill(null);\n\n\tpublic getByPosition(x: number, y: number) {\n\t\tif (x < 0 || x > 7 || y < 0 || y > 7) throw new RangeError('x or y argument out of range');\n\t\treturn this.state[x + y * 8];\n\t}\n\n\tpublic getByIndex(index: number) {\n\t\treturn this.state[index];\n\t}\n\n\t/**\n\t * Sets a new Piece to specified position\n\t * @returns old Piece\n\t */\n\tpublic setByPosition(x: number, y: number, piece: Piece | null) {\n\t\tconst oldPiece = this.getByPosition(x, y);\n\t\tthis.state[x + y * 8] = piece;\n\t\treturn oldPiece;\n\t}\n\n\t/**\n\t * Sets a new Piece to specified index\n\t * @returns old Piece\n\t */\n\tpublic setByIndex(index: number, piece: Piece | null) {\n\t\tconst oldPiece = this.getByIndex(index);\n\t\tthis.state[index] = piece;\n\t\treturn oldPiece;\n\t}\n\n\tpublic setAll(board: Piece[]) {\n\t\tif (board.length !== 63) throw new Error('Board must have exactly 63 pieces.');\n\t\tthis.state = board;\n\t}\n}\n", "import { Color } from '../types/color';\nimport { PieceType } from '../types/piece-type';\nimport { Move } from './moving-strategy';\n\nexport abstract class Piece {\n\tconstructor(protected _color: Color) {}\n\n\tget color(): Color {\n\t\treturn this._color;\n\t}\n\n\tabstract get type(): PieceType;\n\tabstract get image(): string;\n\tabstract get materialValue(): number;\n\tabstract get canCapture(): boolean;\n\tabstract get moves(): Move[];\n\n\tpublic onMove(oldTile: number, newTile: number) {\n\t\treturn;\n\t}\n}\n", "import { Board } from '../board';\n\nexport abstract class Move {\n\tabstract computeMoves(board: Board, position: number): number[];\n}\n", "import { Move } from '../base/moving-strategy';\nimport { Board } from '../board';\n\nexport enum SlideDirection {\n\tTOP = 'TOP',\n\tTOP_RIGHT = 'TOP_RIGHT',\n\tRIGHT = 'RIGHT',\n\tBOTTOM_RIGHT = 'BOTTOM_RIGHT',\n\tBOTTOM = 'BOTTOM',\n\tBOTTOM_LEFT = 'BOTTOM_LEFT',\n\tLEFT = 'LEFT',\n\tTOP_LEFT = 'TOP_LEFT',\n}\n\nexport class SlidingMove extends Move {\n\tconstructor(protected direction: SlideDirection) {\n\t\tsuper();\n\t}\n\n\tcomputeMoves(board: Board, position: number): number[] {\n\t\tconst moves = [];\n\t\tlet newPosition = position;\n\n\t\twhile (newPosition >= 0 && newPosition <= 63) {\n\t\t\tmoves.push(newPosition);\n\n\t\t\tconst nextPosition = this.calculateStepDiff() + newPosition;\n\n\t\t\t// Handle board edges\n\t\t\tif (this.isEdgeCase(newPosition, nextPosition)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tnewPosition = nextPosition;\n\n\t\t\tconst pieceAtStep = board.getByIndex(newPosition);\n\t\t\tif (pieceAtStep != null) {\n\t\t\t\tconst currentPiece = board.getByIndex(position)!;\n\t\t\t\tif (pieceAtStep.color != currentPiece.color) {\n\t\t\t\t\tmoves.push(newPosition);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn moves;\n\t}\n\n\tprivate calculateStepDiff() {\n\t\tswitch (this.direction) {\n\t\t\tcase SlideDirection.TOP:\n\t\t\t\treturn -8;\n\t\t\tcase SlideDirection.TOP_RIGHT:\n\t\t\t\treturn -7;\n\t\t\tcase SlideDirection.RIGHT:\n\t\t\t\treturn 1;\n\t\t\tcase SlideDirection.BOTTOM_RIGHT:\n\t\t\t\treturn 9;\n\t\t\tcase SlideDirection.BOTTOM:\n\t\t\t\treturn 8;\n\t\t\tcase SlideDirection.BOTTOM_LEFT:\n\t\t\t\treturn 7;\n\t\t\tcase SlideDirection.LEFT:\n\t\t\t\treturn -1;\n\t\t\tcase SlideDirection.TOP_LEFT:\n\t\t\t\treturn -9;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid slide direction');\n\t\t}\n\t}\n\n\tprivate isEdgeCase(currentPosition: number, nextPosition: number): boolean {\n\t\tconst currentRow = Math.floor(currentPosition / 8);\n\t\tconst nextRow = Math.floor(nextPosition / 8);\n\n\t\tswitch (this.direction) {\n\t\t\tcase SlideDirection.LEFT:\n\t\t\tcase SlideDirection.RIGHT:\n\t\t\t\treturn currentRow !== nextRow;\n\t\t\tcase SlideDirection.TOP_LEFT:\n\t\t\tcase SlideDirection.BOTTOM_LEFT:\n\t\t\t\treturn nextPosition % 8 === 7;\n\t\t\tcase SlideDirection.TOP_RIGHT:\n\t\t\tcase SlideDirection.BOTTOM_RIGHT:\n\t\t\t\treturn nextPosition % 8 === 0;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n}\n", "import { Move } from '../base/moving-strategy';\nimport { Piece } from '../base/piece';\nimport { SlideDirection, SlidingMove } from '../moves/sliding-move';\nimport { Color } from '../types/color';\nimport { PieceType } from '../types/piece-type';\n\nexport class Bishop extends Piece {\n\tconstructor(protected _color: Color) {\n\t\tsuper(_color);\n\t}\n\n\tget type() {\n\t\treturn PieceType.BISHOP;\n\t}\n\n\tget image(): string {\n\t\treturn `${this.color}Bishop.png`;\n\t}\n\n\tget materialValue(): number {\n\t\treturn 3;\n\t}\n\n\tget canCapture(): boolean {\n\t\treturn true;\n\t}\n\n\tget moves(): Move[] {\n\t\treturn [\n\t\t\tnew SlidingMove(SlideDirection.TOP_LEFT),\n\t\t\tnew SlidingMove(SlideDirection.TOP_RIGHT),\n\t\t\tnew SlidingMove(SlideDirection.BOTTOM_LEFT),\n\t\t\tnew SlidingMove(SlideDirection.BOTTOM_RIGHT),\n\t\t];\n\t}\n}\n", "import { Move } from '../base/moving-strategy';\nimport { Board } from '../board';\n\nexport interface RegularMoveOptions {\n\t/**\n\t * Can this move capture another piece?\n\t * @default true\n\t */\n\tcanCapture?: boolean;\n\n\t/**\n\t * Can this move only be made to capture\n\t * @default false\n\t */\n\tonlyCapture?: boolean;\n}\n\nexport class RegularMove extends Move {\n\tconstructor(\n\t\tprotected step: number,\n\t\tprotected options: RegularMoveOptions = {},\n\t) {\n\t\tsuper();\n\t}\n\n\tcomputeMoves(board: Board, position: number): number[] {\n\t\tconst newPosition = position + this.step;\n\n\t\tconst currentRow = position % 8;\n\t\tconst nextRow = newPosition % 8;\n\n\t\tif (Math.abs(currentRow - nextRow) > 2) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (newPosition >= 0 && newPosition <= 63) {\n\t\t\tconst canCapture = this.options.canCapture ?? true;\n\t\t\tif (board.getByIndex(newPosition) != null && !canCapture) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tconst onlyCapture = this.options.onlyCapture ?? false;\n\t\t\tif (board.getByIndex(newPosition) == null && onlyCapture) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\treturn [newPosition];\n\t\t}\n\t\treturn [];\n\t}\n}\n", "import { Move } from '../base/moving-strategy';\nimport { Piece } from '../base/piece';\nimport { RegularMove } from '../moves/regular-move';\nimport { Color } from '../types/color';\nimport { PieceType } from '../types/piece-type';\n\nexport class King extends Piece {\n\tconstructor(protected _color: Color) {\n\t\tsuper(_color);\n\t}\n\n\tget type() {\n\t\treturn PieceType.KING;\n\t}\n\n\tget image(): string {\n\t\treturn `${this.color}King.png`;\n\t}\n\n\tget materialValue(): number {\n\t\treturn 0; // Invaluable\n\t}\n\n\tget canCapture(): boolean {\n\t\treturn false;\n\t}\n\n\tget moves(): Move[] {\n\t\treturn [\n\t\t\tnew RegularMove(-9),\n\t\t\tnew RegularMove(-8),\n\t\t\tnew RegularMove(-7),\n\t\t\tnew RegularMove(-1),\n\t\t\tnew RegularMove(1),\n\t\t\tnew RegularMove(7),\n\t\t\tnew RegularMove(8),\n\t\t\tnew RegularMove(9),\n\t\t];\n\t}\n}\n", "import { Color } from '../types/color';\nimport { Piece } from '../base/piece';\nimport { PieceType } from '../types/piece-type';\nimport { Move } from '../base/moving-strategy';\nimport { RegularMove } from '../moves/regular-move';\n\nexport class Knight extends Piece {\n\tconstructor(protected _color: Color) {\n\t\tsuper(_color);\n\t}\n\n\tget type() {\n\t\treturn PieceType.KNIGHT;\n\t}\n\n\tget image(): string {\n\t\treturn `${this.color}Knight.png`;\n\t}\n\n\tget materialValue(): number {\n\t\treturn 3;\n\t}\n\n\tget canCapture(): boolean {\n\t\treturn true;\n\t}\n\n\tget moves(): Move[] {\n\t\treturn [\n\t\t\tnew RegularMove(17), // Move up 2, right 1\n\t\t\tnew RegularMove(15), // Move up 2, left 1\n\t\t\tnew RegularMove(10), // Move up 1, right 2\n\t\t\tnew RegularMove(6), // Move up 1, left 2\n\t\t\tnew RegularMove(-17), // Move down 2, left 1\n\t\t\tnew RegularMove(-15), // Move down 2, right 1\n\t\t\tnew RegularMove(-10), // Move down 1, left 2\n\t\t\tnew RegularMove(-6), // Move down 1, right 2\n\t\t];\n\t}\n}\n", "import { Move } from '../base/moving-strategy';\nimport { Board } from '../board';\n\n/**\n * This is a special move where pawn which have not been moved\n * can move 2 squares forward without checking\n */\nexport class PawnDoubleMove extends Move {\n\tconstructor(protected step: -16 | 16) {\n\t\tsuper();\n\t}\n\n\tcomputeMoves(board: Board, position: number): number[] {\n\t\tconst newPosition = position + this.step;\n\t\tconst halfPosition = position + this.step / 2;\n\n\t\tconst halfPositionPiece = board.getByIndex(halfPosition);\n\t\tconst newPositionPiece = board.getByIndex(newPosition);\n\n\t\tif (halfPositionPiece == null && newPositionPiece == null) {\n\t\t\treturn [newPosition];\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n}\n", "import { Color } from '../types/color';\nimport { Piece } from '../base/piece';\nimport { PieceType } from '../types/piece-type';\nimport { Move } from '../base/moving-strategy';\nimport { RegularMove } from '../moves/regular-move';\nimport { PawnDoubleMove } from '../moves/pawn-double-move';\n\nexport class Pawn extends Piece {\n\tprivate moved = false;\n\n\tconstructor(protected _color: Color) {\n\t\tsuper(_color);\n\t}\n\n\tget type() {\n\t\treturn PieceType.PAWN;\n\t}\n\n\tget image(): string {\n\t\treturn `${this.color}Pawn.png`;\n\t}\n\n\tget canCapture(): boolean {\n\t\treturn true;\n\t}\n\n\tget moves(): Move[] {\n\t\tconst moves = [];\n\t\tif (this._color == Color.WHITE) {\n\t\t\tmoves.push(new RegularMove(-8, { canCapture: false }));\n\n\t\t\t// Diagonal Captures\n\t\t\tmoves.push(new RegularMove(-7, { onlyCapture: true }));\n\t\t\tmoves.push(new RegularMove(-9, { onlyCapture: true }));\n\n\t\t\tif (!this.moved) {\n\t\t\t\tmoves.push(new PawnDoubleMove(-16));\n\t\t\t}\n\t\t} else {\n\t\t\tmoves.push(new RegularMove(8, { canCapture: false }));\n\n\t\t\t// Diagonal Captures\n\t\t\tmoves.push(new RegularMove(7, { onlyCapture: true }));\n\t\t\tmoves.push(new RegularMove(9, { onlyCapture: true }));\n\n\t\t\tif (!this.moved) {\n\t\t\t\tmoves.push(new PawnDoubleMove(16));\n\t\t\t}\n\t\t}\n\n\t\treturn moves;\n\t}\n\n\tget materialValue(): number {\n\t\treturn 1;\n\t}\n\n\tpublic onMove(oldTile: number, newTile: number): void {\n\t\tthis.moved = true;\n\t}\n}\n", "import { Color } from '../types/color';\nimport { Piece } from '../base/piece';\nimport { PieceType } from '../types/piece-type';\nimport { Move } from '../base/moving-strategy';\nimport { RegularMove } from '../moves/regular-move';\nimport { SlideDirection, SlidingMove } from '../moves/sliding-move';\n\nexport class Queen extends Piece {\n\tconstructor(protected _color: Color) {\n\t\tsuper(_color);\n\t}\n\n\tget type() {\n\t\treturn PieceType.QUEEN;\n\t}\n\n\tget image(): string {\n\t\treturn `${this.color}Queen.png`;\n\t}\n\n\tget materialValue(): number {\n\t\treturn 9;\n\t}\n\n\tget canCapture(): boolean {\n\t\treturn true;\n\t}\n\n\tget moves(): Move[] {\n\t\treturn [\n\t\t\tnew SlidingMove(SlideDirection.TOP_LEFT),\n\t\t\tnew SlidingMove(SlideDirection.TOP_RIGHT),\n\t\t\tnew SlidingMove(SlideDirection.RIGHT),\n\t\t\tnew SlidingMove(SlideDirection.BOTTOM_RIGHT),\n\t\t\tnew SlidingMove(SlideDirection.BOTTOM),\n\t\t\tnew SlidingMove(SlideDirection.BOTTOM_LEFT),\n\t\t\tnew SlidingMove(SlideDirection.LEFT),\n\t\t\tnew SlidingMove(SlideDirection.TOP),\n\t\t];\n\t}\n}\n", "import { Color } from '../types/color';\nimport { Piece } from '../base/piece';\nimport { PieceType } from '../types/piece-type';\nimport { RegularMove } from '../moves/regular-move';\nimport { Move } from '../base/moving-strategy';\nimport { SlideDirection, SlidingMove } from '../moves/sliding-move';\n\nexport class Rook extends Piece {\n\tconstructor(protected _color: Color) {\n\t\tsuper(_color);\n\t}\n\n\tget type() {\n\t\treturn PieceType.ROOK;\n\t}\n\n\tget image(): string {\n\t\treturn `${this.color}Rook.png`;\n\t}\n\n\tget materialValue(): number {\n\t\treturn 5;\n\t}\n\n\tget canCapture(): boolean {\n\t\treturn true;\n\t}\n\n\tget moves(): Move[] {\n\t\treturn [\n\t\t\tnew SlidingMove(SlideDirection.TOP),\n\t\t\tnew SlidingMove(SlideDirection.RIGHT),\n\t\t\tnew SlidingMove(SlideDirection.BOTTOM),\n\t\t\tnew SlidingMove(SlideDirection.LEFT),\n\t\t];\n\t}\n}\n", "export class SoundPlayer {\n\tpublic static playMove() {\n\t\treturn this.play('move.mp3');\n\t}\n\n\tpublic static playCapture() {\n\t\treturn this.play('capture.mp3');\n\t}\n\n\tprivate static play(filename: string) {\n\t\tconst audio = new Audio(`static/sounds/${filename}`);\n\t\taudio.play();\n\t}\n}\n", "import { Board } from './board';\nimport { Color } from './types/color';\nimport { Bishop } from './pieces/bishop';\nimport { King } from './pieces/king';\nimport { Knight } from './pieces/knight';\nimport { Pawn } from './pieces/pawn';\nimport { Queen } from './pieces/queen';\nimport { Rook } from './pieces/rook';\nimport { SoundPlayer } from './sound-player';\nimport { Piece } from './base/piece';\nimport { PieceType } from './types/piece-type';\n\nexport class Game {\n\tprivate board: Board;\n\tprivate currentTurn = Color.WHITE;\n\n\tprivate capturedPieces: { [key in Color]: Piece[] };\n\n\tconstructor() {\n\t\tthis.board = new Board();\n\t\tthis.capturedPieces = {\n\t\t\t[Color.WHITE]: [],\n\t\t\t[Color.BLACK]: [],\n\t\t};\n\t}\n\n\tpublic setDefaultBoard() {\n\t\tthis.board.setByPosition(0, 0, new Rook(Color.BLACK));\n\t\tthis.board.setByPosition(1, 0, new Knight(Color.BLACK));\n\t\tthis.board.setByPosition(2, 0, new Bishop(Color.BLACK));\n\t\tthis.board.setByPosition(3, 0, new Queen(Color.BLACK));\n\t\tthis.board.setByPosition(4, 0, new King(Color.BLACK));\n\t\tthis.board.setByPosition(5, 0, new Bishop(Color.BLACK));\n\t\tthis.board.setByPosition(6, 0, new Knight(Color.BLACK));\n\t\tthis.board.setByPosition(7, 0, new Rook(Color.BLACK));\n\n\t\tthis.board.setByPosition(0, 7, new Rook(Color.WHITE));\n\t\tthis.board.setByPosition(1, 7, new Knight(Color.WHITE));\n\t\tthis.board.setByPosition(2, 7, new Bishop(Color.WHITE));\n\t\tthis.board.setByPosition(3, 7, new Queen(Color.WHITE));\n\t\tthis.board.setByPosition(4, 7, new King(Color.WHITE));\n\t\tthis.board.setByPosition(5, 7, new Bishop(Color.WHITE));\n\t\tthis.board.setByPosition(6, 7, new Knight(Color.WHITE));\n\t\tthis.board.setByPosition(7, 7, new Rook(Color.WHITE));\n\n\t\t// Generate pawns\n\t\tconst ROW_OFFSET = 8;\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tthis.board.setByIndex(1 * ROW_OFFSET + i, new Pawn(Color.BLACK));\n\t\t\tthis.board.setByIndex(6 * ROW_OFFSET + i, new Pawn(Color.WHITE));\n\t\t}\n\t}\n\n\tpublic getBoard() {\n\t\treturn this.board;\n\t}\n\n\tpublic getCapturedPieces() {\n\t\treturn Object.assign({}, this.capturedPieces);\n\t}\n\n\tpublic calculateTotalMaterial(color: Color) {\n\t\tconst capturedPieces = this.getCapturedPieces()[color];\n\t\treturn capturedPieces\n\t\t\t.map((p) => p.materialValue)\n\t\t\t.reduce((accumulator, a) => accumulator + a, 0);\n\t}\n\n\tpublic canMakeMove(fromTile: number, toTile: number) {\n\t\tconst movedPiece = this.board.getByIndex(fromTile);\n\t\tif (!movedPiece) throw new Error('Invalid fromTile - field is empty');\n\t\tconst targetedPiece = this.board.getByIndex(toTile);\n\n\t\tif (fromTile == toTile) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (targetedPiece) {\n\t\t\tif (targetedPiece.color == movedPiece.color) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!targetedPiece.canCapture) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tconst allMoves = this.computeMoves(fromTile);\n\t\treturn allMoves.includes(toTile);\n\t}\n\n\tpublic listMoves(fromTile: number) {\n\t\tconst moves = this.computeMoves(fromTile);\n\t\treturn moves.filter((toTile) => this.canMakeMove(fromTile, toTile));\n\t}\n\n\tpublic makeMove(fromTile: number, toTile: number) {\n\t\tif (!this.canMakeMove(fromTile, toTile)) {\n\t\t\tconsole.warn(`Illegal move! ${fromTile} -> ${toTile}`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst movedPiece = this.board.getByIndex(fromTile)!;\n\t\tconst targetedPiece = this.board.getByIndex(toTile);\n\n\t\tthis.board.setByIndex(fromTile, null);\n\t\tthis.board.setByIndex(toTile, movedPiece);\n\n\t\tconst captured = targetedPiece != null;\n\t\tif (captured) {\n\t\t\tSoundPlayer.playCapture();\n\t\t\tthis.capturedPieces[this.getCurrentTurn()].push(targetedPiece);\n\t\t} else {\n\t\t\tSoundPlayer.playMove();\n\t\t}\n\n\t\tmovedPiece.onMove(fromTile, toTile);\n\n\t\tconsole.log(movedPiece.type == PieceType.PAWN, this.isLastRow(toTile, movedPiece.color));\n\n\t\tif (movedPiece.type == PieceType.PAWN && this.isLastRow(toTile, movedPiece.color)) {\n\t\t\tthis.promotePawn(toTile);\n\t\t}\n\n\t\tthis.currentTurn = this.getNextTurn();\n\t\tconsole.log(`Completed move!  ${fromTile} -> ${toTile}`);\n\t}\n\n\tpublic getCurrentTurn() {\n\t\treturn this.currentTurn;\n\t}\n\n\tpublic getNextTurn() {\n\t\treturn this.currentTurn == Color.WHITE ? Color.BLACK : Color.WHITE;\n\t}\n\n\tprivate computeMoves(fromTile: number) {\n\t\tconst movedPiece = this.board.getByIndex(fromTile);\n\t\tif (!movedPiece) throw new Error('Invalid fromTile - field is empty');\n\n\t\t// if (movedPiece.color != this.currentTurn) {\n\t\t// \treturn [];\n\t\t// }\n\n\t\treturn movedPiece.moves.flatMap((m) => m.computeMoves(this.board, fromTile));\n\t}\n\n\tprivate isLastRow(index: number, color: Color) {\n\t\tconst row = Math.floor(index / 8);\n\t\tconsole.log(row);\n\t\tif (color == Color.WHITE) {\n\t\t\treturn row == 0;\n\t\t} else {\n\t\t\treturn row == 8;\n\t\t}\n\t}\n\n\tprivate promotePawn(index: number) {\n\t\tconst piece = this.board.getByIndex(index);\n\t\tif (piece?.type != PieceType.PAWN) {\n\t\t\tthrow new Error('Cannot promote non-pawn piece');\n\t\t}\n\n\t\tthis.board.setByIndex(index, new Queen(piece.color));\n\t}\n}\n", "import { Board } from '../board';\n\nexport enum NotationPosition {\n\tTOP = 'notation-top',\n\tBOTTOM = 'notation-bot',\n}\n\nexport class BoardGenerator {\n\t/**\n\t * Draw specified board and return all pieces\n\t */\n\tpublic drawBoard(board: Board): HTMLDivElement[] {\n\t\tconst result: HTMLDivElement[] = [];\n\n\t\tfor (let i = 0; i < 64; i++) {\n\t\t\tconst realPiece = board.getByIndex(i);\n\t\t\tconst tile = document.getElementById(`tile-${i}`)! as HTMLDivElement;\n\t\t\tconst currentPiece = this.getPieceElement(tile);\n\n\t\t\tif (currentPiece && realPiece) {\n\t\t\t\tconst isRightPiece =\n\t\t\t\t\tcurrentPiece.classList.contains(realPiece.type) &&\n\t\t\t\t\tcurrentPiece.classList.contains(realPiece.color);\n\t\t\t\tif (isRightPiece) {\n\t\t\t\t\tresult.push(currentPiece);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tcurrentPiece.remove();\n\t\t\t}\n\n\t\t\tif (currentPiece && !realPiece) {\n\t\t\t\tcurrentPiece.remove();\n\t\t\t} else if (realPiece) {\n\t\t\t\tconst image = `static/img/pieces/${realPiece.image}`;\n\t\t\t\tconst pieceElement = this.createPiece(image, realPiece.type, realPiece.color);\n\t\t\t\ttile.appendChild(pieceElement);\n\t\t\t\tresult.push(pieceElement);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic generateBoard(container: HTMLElement) {\n\t\tfor (let x = 0; x < 8; x++) {\n\t\t\tconst row = this.createRow(x);\n\t\t\tcontainer.appendChild(row);\n\n\t\t\tfor (let y = 0; y < 8; y++) {\n\t\t\t\tconst tile = this.createTile(x, y);\n\t\t\t\trow.appendChild(tile);\n\n\t\t\t\tif (y == 0) {\n\t\t\t\t\tconst notation = this.createNotation(`${x + 1}`, NotationPosition.TOP);\n\t\t\t\t\ttile.appendChild(notation);\n\t\t\t\t}\n\t\t\t\tif (x == 7) {\n\t\t\t\t\tconst letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n\t\t\t\t\tconst notation = this.createNotation(letters[y], NotationPosition.BOTTOM);\n\t\t\t\t\ttile.appendChild(notation);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate createRow(x: number): HTMLDivElement {\n\t\tconst row = document.createElement('div');\n\t\trow.classList.add('row');\n\t\trow.id = `row-${x}`;\n\t\treturn row;\n\t}\n\n\tprivate createTile(x: number, y: number): HTMLDivElement {\n\t\tconst tile = document.createElement('div');\n\t\ttile.classList.add('tile');\n\t\ttile.id = `tile-${x * 8 + y}`;\n\n\t\tconst isVariant = (x + y) % 2;\n\t\tif (isVariant) {\n\t\t\ttile.classList.add('tile-variant');\n\t\t}\n\n\t\treturn tile;\n\t}\n\n\tprivate createNotation(text: string, position: NotationPosition): HTMLDivElement {\n\t\tconst notation = document.createElement('div');\n\t\tnotation.classList.add('notation', position);\n\t\tnotation.textContent = text;\n\t\treturn notation;\n\t}\n\n\tprivate createPiece(image: string, name: string, color: string): HTMLDivElement {\n\t\tconst piece = document.createElement('img');\n\t\tpiece.classList.add('piece', name, color);\n\t\tpiece.src = image;\n\t\tpiece.draggable = false;\n\t\treturn piece;\n\t}\n\n\tprivate getPieceElement(tile: HTMLDivElement): HTMLDivElement | null {\n\t\tconst children = tile.getElementsByClassName('piece');\n\t\tif (children.length > 0) {\n\t\t\treturn children[0] as HTMLDivElement;\n\t\t}\n\t\treturn null;\n\t}\n}\n", "import { Piece } from '../base/piece';\nimport { Game } from '../game';\nimport { Color } from '../types/color';\n\nexport class PlayerGenerator {\n\tpublic drawPlayers(game: Game) {\n\t\tfor (const color of [Color.WHITE, Color.BLACK]) {\n\t\t\tconst nextMove = document.getElementById(`${color}-next-move`)!;\n\t\t\tnextMove.style.display = game.getCurrentTurn() == color ? 'inline-block' : 'none';\n\n\t\t\tconst materialPieces = document.getElementById(`${color}-material-pieces`)!;\n\t\t\tconst capturePieces = game.getCapturedPieces()[color];\n\t\t\tmaterialPieces.replaceChildren(...capturePieces.map(this.generateMaterialPiece));\n\n\t\t\tconst materialElement = document.getElementById(`${color}-material-value`)!;\n\t\t\tconst totalMaterial = game.calculateTotalMaterial(color);\n\t\t\tmaterialElement.innerText = `(${totalMaterial > 0 ? '+' : ''}${totalMaterial})`;\n\t\t}\n\t}\n\n\tprivate generateMaterialPiece(piece: Piece) {\n\t\tconst element = document.createElement('img');\n\t\telement.src = `static/img/pieces/${piece.image}`;\n\t\telement.className = 'material-piece';\n\t\treturn element;\n\t}\n}\n", "import { Board } from '../board';\nimport { Game } from '../game';\nimport { Color } from '../types/color';\nimport { BoardGenerator } from './board-generator';\nimport { PlayerGenerator } from './player-generator';\n\nexport class UIManager {\n\tprivate game: Game;\n\n\tprivate boardGenerator: BoardGenerator;\n\tprivate playerGenerator: PlayerGenerator;\n\n\tprivate currentDraggedPiece: HTMLImageElement | null = null;\n\tprivate dragStartX: number = 0;\n\tprivate dragStartY: number = 0;\n\n\tconstructor(game: Game) {\n\t\tthis.game = game;\n\t\tthis.boardGenerator = new BoardGenerator();\n\t\tthis.playerGenerator = new PlayerGenerator();\n\n\t\tthis.onMouseMove = this.onMouseMove.bind(this);\n\t\tthis.onMouseUp = this.onMouseUp.bind(this);\n\t\tthis.onStartDragging = this.onStartDragging.bind(this);\n\t}\n\n\tpublic start() {\n\t\tconst container = document.getElementById('board')!;\n\t\tthis.boardGenerator.generateBoard(container);\n\t\tthis.drawUi(this.game.getBoard());\n\t}\n\n\tprivate drawUi(board: Board) {\n\t\tthis.drawBoard(board);\n\t\tthis.playerGenerator.drawPlayers(this.game);\n\t}\n\n\tprivate drawBoard(board: Board) {\n\t\tconst pieces = this.boardGenerator.drawBoard(board);\n\t\tfor (const piece of pieces) {\n\t\t\tpiece.removeEventListener('mousedown', this.onStartDragging);\n\t\t\tpiece.addEventListener('mousedown', this.onStartDragging);\n\t\t}\n\t}\n\n\tprivate onStartDragging(event: MouseEvent) {\n\t\tthis.currentDraggedPiece = event.target as HTMLImageElement;\n\t\tthis.currentDraggedPiece.classList.add('dragged');\n\n\t\tthis.dragStartX = event.clientX;\n\t\tthis.dragStartY = event.clientY;\n\n\t\tconst currentTileId = this.getTileFromDraggedPiece()!;\n\t\tconst possibleMoves = this.game.listMoves(currentTileId);\n\t\tfor (const move of possibleMoves) {\n\t\t\tthis.addHighlight(move);\n\t\t}\n\n\t\tdocument.addEventListener('mousemove', this.onMouseMove);\n\t\tdocument.addEventListener('mouseup', this.onMouseUp);\n\t}\n\n\tprivate onMouseMove(event: MouseEvent) {\n\t\tconst newX = event.clientX - this.dragStartX;\n\t\tconst newY = event.clientY - this.dragStartY;\n\n\t\tif (this.currentDraggedPiece) {\n\t\t\tthis.currentDraggedPiece.style.transform = `translate(${newX}px, ${newY}px)`;\n\t\t}\n\t}\n\n\tprivate onMouseUp(event: MouseEvent) {\n\t\tdocument.removeEventListener('mousemove', this.onMouseMove);\n\t\tdocument.removeEventListener('mouseup', this.onMouseUp);\n\t\tthis.removeAllHighlights();\n\n\t\tif (this.currentDraggedPiece) {\n\t\t\tconst currentTileId = this.getTileFromDraggedPiece()!;\n\t\t\tthis.currentDraggedPiece.style.transform = '';\n\t\t\tthis.currentDraggedPiece.classList.remove('dragged');\n\t\t\tthis.currentDraggedPiece = null;\n\n\t\t\tconst targetElement = this.getTileFromPoint(event.clientX, event.clientY);\n\t\t\tif (!targetElement) return;\n\n\t\t\tconst targetTileId = Number(targetElement.id.replace('tile-', ''));\n\t\t\tthis.game.makeMove(currentTileId, targetTileId);\n\t\t\tthis.drawUi(this.game.getBoard());\n\t\t}\n\t}\n\n\tprivate getTileFromPoint(x: number, y: number) {\n\t\tconst targetElement = document.elementFromPoint(x, y);\n\t\tif (!targetElement) return;\n\n\t\tconst isTile = targetElement.classList.contains('tile');\n\t\tif (isTile) {\n\t\t\treturn targetElement;\n\t\t}\n\n\t\tconst parent = targetElement.parentElement!;\n\t\tconst isParentTile = parent.classList.contains('tile');\n\t\tif (isParentTile) {\n\t\t\treturn parent;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate getTileFromDraggedPiece() {\n\t\tif (!this.currentDraggedPiece) return;\n\t\treturn Number(this.currentDraggedPiece.parentElement!.id.replace('tile-', ''));\n\t}\n\n\tprivate addHighlight(tileId: number) {\n\t\tconst tile = document.getElementById(`tile-${tileId}`)!;\n\t\tif (!tile) {\n\t\t\tthrow new Error(`Invalid tile: ${tileId}`);\n\t\t}\n\t\tconst highlight = document.createElement('div');\n\t\thighlight.classList.add('highlighted');\n\n\t\tif (tile.getElementsByClassName('piece').length > 0) {\n\t\t\thighlight.classList.add('highlighted-capture');\n\t\t}\n\t\ttile.appendChild(highlight);\n\t}\n\n\tprivate removeAllHighlights() {\n\t\tArray.from(document.getElementsByClassName('highlighted')).forEach((e) => e.remove());\n\t}\n}\n", "import { Game } from './game';\nimport { UIManager } from './ui/ui-manager';\n\nfunction start() {\n\tconst game = new Game();\n\tgame.setDefaultBoard();\n\tconst uiManager = new UIManager(game);\n\tuiManager.start();\n}\n\ndocument.addEventListener('DOMContentLoaded', () => start());\n"],
  "mappings": "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",
  "names": ["Board", "x", "y", "index", "piece", "oldPiece", "board", "Piece", "_color", "oldTile", "newTile", "Move", "SlidingMove", "Move", "direction", "board", "position", "moves", "newPosition", "nextPosition", "pieceAtStep", "currentPiece", "currentPosition", "currentRow", "nextRow", "Bishop", "Piece", "_color", "SlidingMove", "RegularMove", "Move", "step", "options", "board", "position", "newPosition", "currentRow", "nextRow", "canCapture", "onlyCapture", "King", "Piece", "_color", "RegularMove", "Knight", "Piece", "_color", "RegularMove", "PawnDoubleMove", "Move", "step", "board", "position", "newPosition", "halfPosition", "halfPositionPiece", "newPositionPiece", "Pawn", "Piece", "_color", "moves", "RegularMove", "PawnDoubleMove", "oldTile", "newTile", "Queen", "Piece", "_color", "SlidingMove", "Rook", "Piece", "_color", "SlidingMove", "SoundPlayer", "filename", "Game", "Board", "Rook", "Knight", "Bishop", "Queen", "King", "ROW_OFFSET", "i", "Pawn", "color", "p", "accumulator", "a", "fromTile", "toTile", "movedPiece", "targetedPiece", "SoundPlayer", "m", "index", "row", "piece", "BoardGenerator", "board", "result", "i", "realPiece", "tile", "currentPiece", "image", "pieceElement", "container", "x", "row", "y", "notation", "letters", "text", "position", "name", "color", "piece", "children", "PlayerGenerator", "game", "color", "nextMove", "materialPieces", "capturePieces", "materialElement", "totalMaterial", "piece", "element", "UIManager", "game", "BoardGenerator", "PlayerGenerator", "container", "board", "pieces", "piece", "event", "currentTileId", "possibleMoves", "move", "newX", "newY", "targetElement", "targetTileId", "x", "y", "parent", "tileId", "tile", "highlight", "e", "start", "game", "Game", "UIManager"]
}
